# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Release german.apkg

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:


permissions:
  contents: write

jobs:
  release:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python 3.12
      uses: actions/setup-python@v3
      with:
        python-version: "3.12"
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        virtualenvs-create: true
        virtualenvs-in-project: true
        installer-parallel: true
    #----------------------------------------------
    # load cached venv if cache exists
    #----------------------------------------------
    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
    #----------------------------------------------
    # install dependencies if cache does not exist
    #----------------------------------------------
    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --no-root
    #----------------------------------------------
    # install your root project, if required
    #----------------------------------------------
    - name: Install project
      run: poetry install --no-interaction
    #----------------------------------------------
    # run poetry script
    #----------------------------------------------
    - name: Create apkg
      env:
        GOOGLE_SERVICE_ACCOUNT: ${{ secrets.GOOGLE_SERVICE_ACCOUNT }}
      run: poetry run create
    # https://github.com/softprops/action-gh-release/issues/270
    - name: Tag the repository
      id: tag
      run: |
        # See https://docs.github.com/en/get-started/using-git/dealing-with-special-characters-in-branch-and-tag-names
        TAG=v$(date -Iseconds | sed 's/[T:\+]/-/g')
        echo "$TAG"
        echo "tag=$TAG" >> $GITHUB_OUTPUT
        git config user.name "GitHub Action"
        git config user.email "bloop@blorp.com"
        git tag -a $TAG -m "Published version $TAG" ${GITHUB_SHA}
        git push origin $TAG
    - name: Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.tag.outputs.tag }}
        files: |
          *.apkg
    - name: Upload to Dropbox
      uses: whalemare/action-dropbox@v1.0.0
      with:
        accessToken: ${{ secrets.DROPBOX_ACCESS_TOKEN }}
        destination: "/Документы/Billingua"
        file: german.apkg
